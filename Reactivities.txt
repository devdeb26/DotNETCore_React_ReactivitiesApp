Creating Reactivities App

>dotnet new sln
>dotnet new webapi -n API -controllers
>dotnet new classlib -n Domain
>dotnet new classlib -n Application
>dotnet new classlib -n Persistence
>dotnet sln add API
>dotnet sln add Application
>dotnet sln add Domain
>dotnet sln add Persistence
>view under solution explorer in vscode
>add package references by right cliking API (sample) add project

>add dbcontext for sqlite
>add connection string 
>dotnet tool install --global dotnet-ef --version 9.0.0
>dotnet ef
>dotnet ef migrations add InitialCreate -p Persistence -s API
>dotnet ef database update -p Persistence -s API
>dotnet ef database drop -p Persistence -s API (delete database because theres no seeding yet created)

>seeding data to database
>create 'DbInitializer.cs' under persistence
>go to downloaded resources 'CourseAssets' 
>search seeddata.txt
>copy and paste data to dbinitializer
>added app.Services.CreateScope in API Program.cs
>cd API 'dotnet watch'

>create api controllers in API project
>import reactivities.postman collection from courseassets to postman collection import

>saving codes to source control
>create gitignore file 
>dotnet new gitignore in new terminal
>add appsettings json and reactivities db to gitignore
>commit and create github repo
>git remote add origin https://github.com/devdeb26/DotNETCore_React_ReactivitiesApp.git

>create react skeleton
>install vite 
>npm create vite@latest in reactivities solution
>client is the name of the project
>cd client - npm install
>npm run dev
>add extension - ES7+React/Redux/React-Native snippets
>add extension - eslint

>fetching data from api
>unblock cors policy
>added builder.services.addcors();
>added app.useCors()

>creating an Activity type in Typescript
>types are like dtos
>created "lib" folder inside "src" then added folder "types"
>converted json response to typescript then put it to index.d.ts

>using react developer tools
>install react dev tools browser chrome extension

>adding material ui
>install material ui at mui.com/core
>npm install @mui/material @emotion/react @emotion/styled
>npm install @fontsource/roboto
>added import fontsource to main.tsx file
>npm install @mui/icons-material
>turned on link editing on vscode: settings> link 

>adding https support to the client app
>cd client / npm install -D vite-plugin-mkcert
>mkcert is a simple tool for making locally trusted developement certificates. it requires no configuration
>import mkcert from 'vite-plugin-mkcert'; in vite.config.ts

>adding axios for data fetching
>npm install axios








	